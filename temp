We then test proposed method in Gazebo, where the full 6DOF dynamic model for the players are considered. In this implementation, the assignment computation is fully distributed. The defenders make local estimation about the intruders in range, and communicate with their neighboring defenders. The preferred intruder lists are used in the SDMI stage whenever available, without waiting for the iteration to finish. This distributed implementation is realized by each player being an independent ROS node.

The dynamic model used in this simulation is Bizard Crazyflie2.0, and is built by XXX et.al.[]. A velocity controller is designed to convert the heading angle command into rotation speed of the rotors. 

The major impact brought by the 6DOF dynamic model is that the players cannot follow the velocity command precisely, therefore the player locations deviate from the desired value since the game starts. Such deviation in turn cause the subsequential assignments to be different. In the simple simulation, it is possible to use one single speed ration $v_I/v_D$ to compute the dominant regions, in the Gazebo simulation, however, we need to measure the instataneous speed for each DR computation. 

Another issue to be handled is collision avoidance. Here we choose to use ORCA []. ORCA computes the smallest variation on the desired velocity that avoids collision for a given period time in the future. As the output of our game strategy is exactly a desired velocity, we implement ORCA on top of it to handle the collision avoidance problem. The structure of setup is shown in Figure. 